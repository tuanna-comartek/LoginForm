{"version":3,"sources":["graphql/generated/graphql.ts","graphql/client.ts","modules/Login/index.tsx","modules/Login/hooks/useLogin.tsx","modules/Home/index.tsx","modules/TodoList/TodoForm.tsx","modules/TodoList/Todo.tsx","modules/TodoList/TodoList.tsx","components/Navigation.tsx","components/RootApp.tsx","i18n.js","index.tsx","assets/images/item8.png","env.ts"],"names":["Capacity","DayOfWeek","DevicePubSubType","DeviceStatus","DirectionRotateType","FileType","FrameDirection","FrameType","GroupMessageDirection","GroupMessageSpeed","MediaFilterType","MediaOrderField","MediaStatus","MediaType","OsType","PlaylistScreenType","PlaylistStatus","Roles","Resolutions","ScheduleType","ScreenType","SettingType","Sort","SubscriberType","User_Status","UserLimit","VideoPreset","GetCompanyDocument","gql","LoginDocument","defaultWrapper","action","_operationName","getSdk","client","withWrapper","getCompany","variables","requestHeaders","wrappedRequestHeaders","request","login","getClient","signal","headers","lang","graphQLClient","GraphQLClient","env","apiEndPoint","getSDK","auth","useStyles","makeStyles","theme","createStyles","root","maxWidth","display","margin","height","border","borderRadius","textField","width","submitButton","marginTop","title","textAlign","successMessage","color","errorMessage","LoginPage","history","useHistory","formik","useFormik","initialValues","email","password","onSubmit","values","onLogin","username","hadleSubmit","classes","useState","fetching","data","undefined","error","setState","input","a","state","then","catch","useLogin","useEffect","token","replace","alert","style","paddingTop","className","handleSubmit","Grid","container","justify","direction","item","lg","md","sm","xs","paddingBottom","TextField","name","id","label","value","type","helperText","onChange","handleChange","Button","variant","HomePage","TodoForm","props","edit","setInput","inputImage","setInputImage","inputRef","useRef","e","target","handleChangeImage","preventDefault","Math","floor","random","text","image","placeholder","ref","marginRight","onClick","backgroundColor","justifyContent","alignItems","paddingRight","minWidth","marginBottom","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","key","padding","Card","CardMedia","component","alt","CardContent","Typography","gutterBottom","status","CardActions","size","TodoList","Image","setTodos","addToast","useToasts","fontSize","test","newTodos","console","log","appearance","autoDismiss","updatedTodos","removedArr","filter","todoId","newValue","prev","Navigation","src","aria-current","to","textDecoration","path","AppRouter","render","exact","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","react","useSuspense","ns","defaultNS","detection","order","lookupCookie","lookupLocalStorage","lookupSessionStorage","caches","ReactDOM","StrictMode","document","getElementById","module","exports","cwd","process","__dirname","apiSubscriptionEndPoint","REACT_APP_API_SUBSCRIPTION_END_POINT","pageTitle","REACT_APP_PAGE_TITLE","tokenKey","appName","REACT_APP_NAME","languageKey","formatDate"],"mappings":"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","file":"static/js/main.eae6dc7a.chunk.js","sourcesContent":["import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JsonScalar: any;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type AssignUserInput = {\n  companyId: Scalars['ID'];\n  role: Roles;\n  /** List user's id for assign  */\n  userIds: Array<Scalars['ID']>;\n};\n\nexport type BlockUserInput = {\n  _id: Scalars['ID'];\n  status: User_Status;\n};\n\nexport enum Capacity {\n  Fifty = 'FIFTY',\n  Hundred = 'HUNDRED',\n  Ten = 'TEN',\n  Twenty = 'TWENTY'\n}\n\nexport type CaptureScreenInput = {\n  file: Scalars['String'];\n};\n\nexport type ChangePasswordInput = {\n  newPassword: Scalars['String'];\n  oldPassword: Scalars['String'];\n};\n\nexport type Company = {\n  __typename?: 'Company';\n  /** id */\n  _id: Scalars['ID'];\n  address?: Maybe<Scalars['String']>;\n  address_latitude?: Maybe<Scalars['Float']>;\n  address_longitude?: Maybe<Scalars['Float']>;\n  admins?: Maybe<Array<User>>;\n  capacity: Scalars['Float'];\n  createdAt: Scalars['Float'];\n  createdBy: User;\n  createdById: Scalars['ID'];\n  /** Dung lượng file thực tế đã upload (MB) */\n  currentStorageSize?: Maybe<Scalars['Float']>;\n  deletedAt?: Maybe<Scalars['Float']>;\n  deletedBy: Scalars['ID'];\n  deletedByUser: User;\n  description?: Maybe<Scalars['String']>;\n  domain: Scalars['String'];\n  email: Scalars['String'];\n  /** Dung lượng file có thể upload (MB) */\n  limitUpload?: Maybe<Scalars['Float']>;\n  name: Scalars['String'];\n  openTimes?: Maybe<Array<OpenTime>>;\n  phone: Scalars['String'];\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy: User;\n  updatedById: Scalars['ID'];\n  userLimit: Scalars['Float'];\n  userRole?: Maybe<Roles>;\n};\n\nexport type CompanyUser = {\n  __typename?: 'CompanyUser';\n  /** id */\n  _id: Scalars['ID'];\n  companies?: Maybe<Array<Company>>;\n  createdAt?: Maybe<Scalars['Float']>;\n  createdBy?: Maybe<User>;\n  createdById?: Maybe<Scalars['ID']>;\n  deletedAt?: Maybe<Scalars['Float']>;\n  deletedBy?: Maybe<Scalars['ID']>;\n  deletedByUser?: Maybe<User>;\n  /** email */\n  email?: Maybe<Scalars['String']>;\n  /** full name */\n  name: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  role: Roles;\n  status: User_Status;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy: User;\n  updatedById: Scalars['ID'];\n  username: Scalars['String'];\n};\n\nexport type ConnectWifiInput = {\n  _id: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  ssid: Scalars['String'];\n};\n\nexport type CreateCompanyInput = {\n  address?: Maybe<Scalars['String']>;\n  address_latitude?: Maybe<Scalars['Float']>;\n  address_longitude?: Maybe<Scalars['Float']>;\n  capacity?: Maybe<Capacity>;\n  description?: Maybe<Scalars['String']>;\n  domain: Scalars['String'];\n  email: Scalars['String'];\n  limitUpload: Scalars['Float'];\n  name: Scalars['String'];\n  openTimes?: Maybe<Array<OpenTimeInput>>;\n  phone: Scalars['String'];\n  userLimit?: Maybe<UserLimit>;\n};\n\nexport type CreateDeviceInput = {\n  companyId?: Maybe<Scalars['ID']>;\n  deviceCode?: Maybe<Scalars['String']>;\n  deviceModel?: Maybe<Scalars['String']>;\n  groupId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  os?: Maybe<OsType>;\n  schedules?: Maybe<Array<DevicePlaylistScheduleInput>>;\n  screen?: Maybe<ScreenType>;\n  yearOfManufacture?: Maybe<Scalars['Float']>;\n};\n\nexport type CreateFolderInput = {\n  filename: Scalars['String'];\n  parentId?: Maybe<Scalars['ID']>;\n};\n\nexport type CreateGroupInput = {\n  deviceIds?: Maybe<Array<Scalars['ID']>>;\n  name: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  timezone: Scalars['String'];\n};\n\nexport type CreatePlaylistInput = {\n  companyId: Scalars['ID'];\n  frames: Array<FrameInputType>;\n  name: Scalars['String'];\n  orientation: FrameDirection;\n  resolution: Resolutions;\n  screenType: PlaylistScreenType;\n  secondFrames?: Maybe<Array<FrameInputType>>;\n  status: PlaylistStatus;\n};\n\nexport type CreateTokenAutoLoginInput = {\n  companyId: Scalars['String'];\n};\n\nexport type CreateUploadSettingInput = {\n  key: SettingType;\n  value: Array<UploadSettingDataInput>;\n};\n\nexport type CreateUserInput = {\n  email?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  password: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type DailyScheduleData = {\n  __typename?: 'DailyScheduleData';\n  dateRange?: Maybe<DateRange>;\n  timeInDay?: Maybe<TimeInDay>;\n};\n\nexport type DailyScheduleInputData = {\n  dateRange?: Maybe<DateRangeInput>;\n  timeInDay?: Maybe<TimeInDayInput>;\n};\n\nexport type DateRange = {\n  __typename?: 'DateRange';\n  /** Time start */\n  dateFrom: Scalars['String'];\n  /** Time end */\n  dateTo: Scalars['String'];\n};\n\nexport type DateRangeInput = {\n  /** Time start */\n  dateFrom: Scalars['String'];\n  /** Time end */\n  dateTo: Scalars['String'];\n};\n\nexport enum DayOfWeek {\n  Friday = 'FRIDAY',\n  Monday = 'MONDAY',\n  Saturday = 'SATURDAY',\n  Sunday = 'SUNDAY',\n  Thursday = 'THURSDAY',\n  Tuesday = 'TUESDAY',\n  Wednesday = 'WEDNESDAY'\n}\n\nexport type DayOff = {\n  __typename?: 'DayOff';\n  /** id */\n  _id: Scalars['ID'];\n  companyId: Scalars['ID'];\n  createdAt?: Maybe<Scalars['Float']>;\n  date?: Maybe<Scalars['Float']>;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy: User;\n  updatedById: Scalars['ID'];\n};\n\nexport type DeleteCompanyInput = {\n  _id: Scalars['String'];\n};\n\nexport type DeleteDeviceInput = {\n  _id: Scalars['ID'];\n};\n\nexport type DeleteGroupInput = {\n  _id: Scalars['ID'];\n};\n\nexport type DeleteMediaInput = {\n  _id: Scalars['ID'];\n};\n\nexport type DeletePlaylistInput = {\n  _id: Scalars['ID'];\n};\n\nexport type Device = {\n  __typename?: 'Device';\n  /** id */\n  _id: Scalars['ID'];\n  company?: Maybe<Company>;\n  companyId?: Maybe<Scalars['ID']>;\n  createdAt: Scalars['Float'];\n  createdBy?: Maybe<User>;\n  createdById: Scalars['ID'];\n  currentPlaylist?: Maybe<Playlist>;\n  currentPlaylistId?: Maybe<Scalars['ID']>;\n  deletedAt?: Maybe<Scalars['Float']>;\n  deletedBy?: Maybe<Scalars['ID']>;\n  deletedByUser?: Maybe<User>;\n  /** match với mã trên thiết bị */\n  deviceCode?: Maybe<Scalars['String']>;\n  deviceModel?: Maybe<Scalars['String']>;\n  direction?: Maybe<DirectionRotateType>;\n  group?: Maybe<Group>;\n  groupId?: Maybe<Scalars['ID']>;\n  lastConnect?: Maybe<Scalars['String']>;\n  lastGetInfoAt?: Maybe<Scalars['Float']>;\n  lastScreenshot?: Maybe<Scalars['String']>;\n  localTime?: Maybe<Scalars['String']>;\n  /** Địa chỉ mac của thiết bị thật */\n  macAddress?: Maybe<Scalars['String']>;\n  momentDateFormat?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  offByAdmin?: Maybe<Scalars['Boolean']>;\n  os?: Maybe<OsType>;\n  /** Chuyển schedule sang group device */\n  schedules?: Maybe<Array<DevicePlaylistSchedule>>;\n  screen?: Maybe<ScreenType>;\n  status?: Maybe<DeviceStatus>;\n  subscriber?: Maybe<SubscriberType>;\n  subscriptionDate?: Maybe<SubscriptionDate>;\n  /** Device token sinh ra khi api publicGetDeviceByCode được gọi (device đc gán vào 1 thiết bị thật) */\n  token?: Maybe<Scalars['String']>;\n  /** Bỏ field này */\n  uniqueCode: Scalars['String'];\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy?: Maybe<User>;\n  updatedById?: Maybe<Scalars['ID']>;\n  version?: Maybe<Scalars['Float']>;\n  wifi?: Maybe<WifiType>;\n  yearOfManufacture?: Maybe<Scalars['Float']>;\n};\n\nexport type DevicePlaylistSchedule = {\n  __typename?: 'DevicePlaylistSchedule';\n  dailyData?: Maybe<DailyScheduleData>;\n  monthlyData?: Maybe<MonthlyScheduleData>;\n  playlist?: Maybe<Playlist>;\n  playlistId: Scalars['ID'];\n  specialDayData?: Maybe<SpecialDayScheduleData>;\n  type: ScheduleType;\n  weeklyData?: Maybe<WeeklyScheduleData>;\n};\n\nexport type DevicePlaylistScheduleInput = {\n  dailyData?: Maybe<DailyScheduleInputData>;\n  monthlyData?: Maybe<MonthlyScheduleInputData>;\n  playlistId: Scalars['ID'];\n  specialDayData?: Maybe<SpecialDayScheduleInputData>;\n  type: ScheduleType;\n  weeklyData?: Maybe<WeeklyScheduleInputData>;\n};\n\nexport type DevicePubSub = {\n  __typename?: 'DevicePubSub';\n  data: Scalars['JsonScalar'];\n  type: DevicePubSubType;\n};\n\nexport enum DevicePubSubType {\n  CaptureScreen = 'CAPTURE_SCREEN',\n  ClearDeviceStorage = 'CLEAR_DEVICE_STORAGE',\n  ConnectWifi = 'CONNECT_WIFI',\n  Deleted = 'DELETED',\n  DeviceCodeUpdated = 'DEVICE_CODE_UPDATED',\n  NewCaptureScreen = 'NEW_CAPTURE_SCREEN',\n  NewData = 'NEW_DATA',\n  ReloadClientApp = 'RELOAD_CLIENT_APP',\n  RestartDevice = 'RESTART_DEVICE',\n  RotateScreen = 'ROTATE_SCREEN',\n  ScanWifiDevice = 'SCAN_WIFI_DEVICE',\n  SendGroupMessage = 'SEND_GROUP_MESSAGE',\n  SendWifi = 'SEND_WIFI',\n  StatusConnectWifi = 'STATUS_CONNECT_WIFI'\n}\n\nexport enum DeviceStatus {\n  LostConnection = 'LOST_CONNECTION',\n  NoConnection = 'NO_CONNECTION',\n  NoPlaylist = 'NO_PLAYLIST',\n  Off = 'OFF',\n  On = 'ON'\n}\n\nexport enum DirectionRotateType {\n  Inverted = 'INVERTED',\n  Left = 'LEFT',\n  Normal = 'NORMAL',\n  Right = 'RIGHT'\n}\n\nexport type DocumentImageInputType = {\n  absolutePathToFile?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  mimetype?: Maybe<Scalars['String']>;\n  path?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport enum FileType {\n  File = 'FILE',\n  Folder = 'FOLDER'\n}\n\nexport type ForgotPasswordInput = {\n  email: Scalars['String'];\n};\n\nexport type Frame = {\n  __typename?: 'Frame';\n  _id: Scalars['String'];\n  backgroundColor?: Maybe<Scalars['String']>;\n  documentImages?: Maybe<Array<MediaImage>>;\n  duration: Scalars['Float'];\n  fabricData?: Maybe<Scalars['JsonScalar']>;\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  order?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  type: FrameType;\n  videoProfiles?: Maybe<Array<VideoProfile>>;\n};\n\nexport enum FrameDirection {\n  Horizontal = 'HORIZONTAL',\n  Vertical = 'VERTICAL'\n}\n\nexport type FrameInputType = {\n  backgroundColor?: Maybe<Scalars['String']>;\n  documentImages?: Maybe<Array<DocumentImageInputType>>;\n  duration: Scalars['Float'];\n  fabricData: Scalars['JsonScalar'];\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  order?: Maybe<Scalars['Int']>;\n  text?: Maybe<Scalars['String']>;\n  type: FrameType;\n  videoProfiles?: Maybe<Array<VideoProfileInput>>;\n};\n\nexport enum FrameType {\n  Document = 'DOCUMENT',\n  Image = 'IMAGE',\n  Video = 'VIDEO',\n  WebUrl = 'WEB_URL'\n}\n\nexport type Group = {\n  __typename?: 'Group';\n  /** id */\n  _id: Scalars['ID'];\n  company?: Maybe<Company>;\n  companyId: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  createdBy?: Maybe<User>;\n  createdById: Scalars['ID'];\n  deviceIds?: Maybe<Array<Scalars['ID']>>;\n  devices?: Maybe<Array<Device>>;\n  name: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  /** Khởi động lại thiết bị hàng ngày */\n  rebootDeviceEveryDay?: Maybe<Scalars['Boolean']>;\n  scheduleVersion?: Maybe<Scalars['Float']>;\n  schedules?: Maybe<Array<DevicePlaylistSchedule>>;\n  showClock?: Maybe<Scalars['Boolean']>;\n  timezone: Scalars['String'];\n  /** Dừng chạy lịch, (dừng chạy tạm thời, không phải xóa) */\n  turnOffSchedule?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy?: Maybe<User>;\n  updatedById?: Maybe<Scalars['ID']>;\n};\n\nexport enum GroupMessageDirection {\n  LeftToRight = 'LEFT_TO_RIGHT',\n  RightToLeft = 'RIGHT_TO_LEFT'\n}\n\nexport enum GroupMessageSpeed {\n  Fast = 'FAST',\n  Medium = 'MEDIUM',\n  Slow = 'SLOW'\n}\n\nexport type Jwt = {\n  __typename?: 'JWT';\n  companyId?: Maybe<Scalars['String']>;\n  expiresAt: Scalars['Int'];\n  payload: User;\n  refreshToken: Scalars['String'];\n  refreshTokenExpiresAt: Scalars['Int'];\n  role: Roles;\n  token: Scalars['String'];\n};\n\n\nexport type KickOutCompanyInput = {\n  companyId: Scalars['ID'];\n  userId: Scalars['ID'];\n};\n\nexport type LoginInput = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\nexport type MatchDeviceByCodeInput = {\n  _id: Scalars['ID'];\n  deviceCode: Scalars['String'];\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  _id: Scalars['ID'];\n  canEdit: Scalars['Boolean'];\n  clanIds?: Maybe<Array<Scalars['ID']>>;\n  companyId?: Maybe<Scalars['ID']>;\n  createdAt?: Maybe<Scalars['Float']>;\n  createdBy?: Maybe<User>;\n  createdById?: Maybe<Scalars['ID']>;\n  duration?: Maybe<Scalars['Float']>;\n  encoding?: Maybe<Scalars['String']>;\n  filename: Scalars['String'];\n  images?: Maybe<Array<MediaImage>>;\n  jobId?: Maybe<Scalars['String']>;\n  mediaProcess?: Maybe<Media>;\n  mediaType?: Maybe<MediaType>;\n  mimetype?: Maybe<Scalars['String']>;\n  optimizePath?: Maybe<Scalars['String']>;\n  /** Link sau khi convert/optimize */\n  optimizeUrl?: Maybe<Scalars['String']>;\n  /** Link ban đầu */\n  originalUrl?: Maybe<Scalars['String']>;\n  parent?: Maybe<Media>;\n  parentId?: Maybe<Scalars['ID']>;\n  path?: Maybe<Scalars['String']>;\n  /** Worker process retries time */\n  retry?: Maybe<Scalars['Int']>;\n  size?: Maybe<Scalars['Float']>;\n  status: MediaStatus;\n  thumbs?: Maybe<Array<MediaThumb>>;\n  /** file or folder */\n  type: FileType;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy?: Maybe<User>;\n  updatedById?: Maybe<Scalars['ID']>;\n  videoProfiles?: Maybe<Array<VideoProfile>>;\n};\n\nexport enum MediaFilterType {\n  Image = 'IMAGE',\n  Pdf = 'PDF',\n  Powerpoint = 'POWERPOINT',\n  Video = 'VIDEO'\n}\n\nexport type MediaImage = {\n  __typename?: 'MediaImage';\n  height?: Maybe<Scalars['Float']>;\n  mimetype?: Maybe<Scalars['String']>;\n  path?: Maybe<Scalars['String']>;\n  url?: Maybe<Scalars['String']>;\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type MediaOrderBy = {\n  direction: Sort;\n  field: MediaOrderField;\n};\n\nexport enum MediaOrderField {\n  CreatedAt = 'CREATED_AT',\n  Name = 'NAME',\n  Type = 'TYPE'\n}\n\nexport enum MediaStatus {\n  Done = 'DONE',\n  Failed = 'FAILED',\n  Processing = 'PROCESSING'\n}\n\nexport type MediaThumb = {\n  __typename?: 'MediaThumb';\n  path: Scalars['String'];\n  url: Scalars['String'];\n  width: Scalars['Int'];\n};\n\nexport enum MediaType {\n  Document = 'DOCUMENT',\n  Image = 'IMAGE',\n  Pdf = 'PDF',\n  Powerpoint = 'POWERPOINT',\n  Video = 'VIDEO'\n}\n\nexport type MonthInYear = {\n  __typename?: 'MonthInYear';\n  days: Array<Scalars['Int']>;\n  month: Scalars['Int'];\n};\n\nexport type MonthInYearInput = {\n  days: Array<Scalars['Int']>;\n  month: Scalars['Int'];\n};\n\nexport type MonthlyScheduleData = {\n  __typename?: 'MonthlyScheduleData';\n  months?: Maybe<Array<MonthInYear>>;\n  timeInDay?: Maybe<TimeInDay>;\n};\n\nexport type MonthlyScheduleInputData = {\n  months: Array<MonthInYearInput>;\n  timeInDay?: Maybe<TimeInDayInput>;\n};\n\nexport type MoveMediaInput = {\n  _id: Scalars['ID'];\n  parentId: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  assignUserToCompany: Scalars['Float'];\n  blockUser?: Maybe<User>;\n  captureScreenshot: Scalars['Boolean'];\n  changePassword: Scalars['Boolean'];\n  clearDeviceStorage: Scalars['Boolean'];\n  connectWifiDevice?: Maybe<Scalars['Boolean']>;\n  createCompany?: Maybe<Company>;\n  createDevice?: Maybe<Device>;\n  createFolder?: Maybe<Media>;\n  createGroup?: Maybe<Group>;\n  createPlaylist?: Maybe<Playlist>;\n  createTokenAutoLogin: NewTokenAutoLogin;\n  createUploadSetting?: Maybe<Setting>;\n  createUser?: Maybe<User>;\n  delPlaylist: Scalars['Boolean'];\n  deleteCompany?: Maybe<Scalars['Boolean']>;\n  deleteDevice: Scalars['Boolean'];\n  deleteFile?: Maybe<Scalars['Boolean']>;\n  deleteGroup?: Maybe<Scalars['Boolean']>;\n  deleteUser?: Maybe<Scalars['Boolean']>;\n  forgotPassword: Scalars['Boolean'];\n  kickOutCompany: Scalars['Boolean'];\n  login: Jwt;\n  matchDeviceByCode?: Maybe<Device>;\n  moveFile?: Maybe<Media>;\n  publicUpdateDeviceStatus?: Maybe<Device>;\n  refreshToken: Jwt;\n  reloadClientApp: Scalars['Boolean'];\n  resetPassword: Scalars['Boolean'];\n  restartDevice: Scalars['Boolean'];\n  restoreUser?: Maybe<Scalars['Boolean']>;\n  rotateScreen: Device;\n  scanWifiDevice?: Maybe<Array<WifiType>>;\n  sendGroupMessage: Scalars['Boolean'];\n  sendScreenshot?: Maybe<Scalars['Boolean']>;\n  sendWifiDevice?: Maybe<Scalars['Boolean']>;\n  settingDevice?: Maybe<Device>;\n  statusConnectWifi?: Maybe<Scalars['Boolean']>;\n  updateCompany?: Maybe<Company>;\n  updateDevice?: Maybe<Device>;\n  updateDeviceCurrentPlaylist?: Maybe<Device>;\n  updateDeviceStatus?: Maybe<Device>;\n  updateFile?: Maybe<Media>;\n  updateGroup?: Maybe<Group>;\n  updateGroupPlaylistSchedules?: Maybe<Device>;\n  updatePlaylist?: Maybe<Playlist>;\n  updatePlaylistStatus?: Maybe<Playlist>;\n  updateProfile: User;\n  updateTimeZoneGroup?: Maybe<Group>;\n  updateUser?: Maybe<User>;\n  uploadFile?: Maybe<Media>;\n  verifyTokenAutoLogin: Jwt;\n};\n\n\nexport type MutationAssignUserToCompanyArgs = {\n  assignUserInput: AssignUserInput;\n};\n\n\nexport type MutationBlockUserArgs = {\n  input: BlockUserInput;\n};\n\n\nexport type MutationCaptureScreenshotArgs = {\n  input: QueryDeviceInput;\n};\n\n\nexport type MutationChangePasswordArgs = {\n  input: ChangePasswordInput;\n};\n\n\nexport type MutationClearDeviceStorageArgs = {\n  input: QueryDeviceInput;\n};\n\n\nexport type MutationConnectWifiDeviceArgs = {\n  input: ConnectWifiInput;\n};\n\n\nexport type MutationCreateCompanyArgs = {\n  input: CreateCompanyInput;\n};\n\n\nexport type MutationCreateDeviceArgs = {\n  input: CreateDeviceInput;\n};\n\n\nexport type MutationCreateFolderArgs = {\n  input: CreateFolderInput;\n};\n\n\nexport type MutationCreateGroupArgs = {\n  input: CreateGroupInput;\n};\n\n\nexport type MutationCreatePlaylistArgs = {\n  input: CreatePlaylistInput;\n};\n\n\nexport type MutationCreateTokenAutoLoginArgs = {\n  input: CreateTokenAutoLoginInput;\n};\n\n\nexport type MutationCreateUploadSettingArgs = {\n  input: CreateUploadSettingInput;\n};\n\n\nexport type MutationCreateUserArgs = {\n  input: CreateUserInput;\n};\n\n\nexport type MutationDelPlaylistArgs = {\n  input: DeletePlaylistInput;\n};\n\n\nexport type MutationDeleteCompanyArgs = {\n  input: DeleteCompanyInput;\n};\n\n\nexport type MutationDeleteDeviceArgs = {\n  input: DeleteDeviceInput;\n};\n\n\nexport type MutationDeleteFileArgs = {\n  input: DeleteMediaInput;\n};\n\n\nexport type MutationDeleteGroupArgs = {\n  input: DeleteGroupInput;\n};\n\n\nexport type MutationDeleteUserArgs = {\n  input: QueryUserInput;\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  input: ForgotPasswordInput;\n};\n\n\nexport type MutationKickOutCompanyArgs = {\n  input: KickOutCompanyInput;\n};\n\n\nexport type MutationLoginArgs = {\n  input: LoginInput;\n};\n\n\nexport type MutationMatchDeviceByCodeArgs = {\n  input: MatchDeviceByCodeInput;\n};\n\n\nexport type MutationMoveFileArgs = {\n  input: MoveMediaInput;\n};\n\n\nexport type MutationPublicUpdateDeviceStatusArgs = {\n  input: PublicUpdateDeviceStatusInput;\n};\n\n\nexport type MutationRefreshTokenArgs = {\n  input: RefreshTokenInput;\n};\n\n\nexport type MutationReloadClientAppArgs = {\n  input: QueryDeviceInput;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  input: ResetPasswordInput;\n};\n\n\nexport type MutationRestartDeviceArgs = {\n  input: QueryDeviceInput;\n};\n\n\nexport type MutationRestoreUserArgs = {\n  input: QueryUserInput;\n};\n\n\nexport type MutationRotateScreenArgs = {\n  input: UpdateRotateInput;\n};\n\n\nexport type MutationScanWifiDeviceArgs = {\n  input: ScanWifiDeviceInput;\n};\n\n\nexport type MutationSendGroupMessageArgs = {\n  input: SendGroupMessageInput;\n};\n\n\nexport type MutationSendScreenshotArgs = {\n  input: CaptureScreenInput;\n};\n\n\nexport type MutationSendWifiDeviceArgs = {\n  input: SendWifiInput;\n};\n\n\nexport type MutationSettingDeviceArgs = {\n  input: SettingDeviceInput;\n};\n\n\nexport type MutationStatusConnectWifiArgs = {\n  input: StatusConnectWifiInput;\n};\n\n\nexport type MutationUpdateCompanyArgs = {\n  input: UpdateCompanyInput;\n};\n\n\nexport type MutationUpdateDeviceArgs = {\n  input: UpdateDeviceInput;\n};\n\n\nexport type MutationUpdateDeviceCurrentPlaylistArgs = {\n  input: UpdateDeviceCurrentPlaylistInput;\n};\n\n\nexport type MutationUpdateDeviceStatusArgs = {\n  input: UpdateDeviceStatusInput;\n};\n\n\nexport type MutationUpdateFileArgs = {\n  input: UpdateMediaInput;\n};\n\n\nexport type MutationUpdateGroupArgs = {\n  input: UpdateGroupInput;\n};\n\n\nexport type MutationUpdateGroupPlaylistSchedulesArgs = {\n  input: UpdateDeviceSchedulesInput;\n};\n\n\nexport type MutationUpdatePlaylistArgs = {\n  input: UpdatePlaylistInput;\n};\n\n\nexport type MutationUpdatePlaylistStatusArgs = {\n  input: UpdatePlaylistStatusInput;\n};\n\n\nexport type MutationUpdateProfileArgs = {\n  input: UpdateProfileInput;\n};\n\n\nexport type MutationUpdateTimeZoneGroupArgs = {\n  input: UpdateTimeZoneGroupInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationUploadFileArgs = {\n  file: Scalars['Upload'];\n  parentId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type MutationVerifyTokenAutoLoginArgs = {\n  input: VerifyTokenAutoLoginInput;\n};\n\nexport type NewTokenAutoLogin = {\n  __typename?: 'NewTokenAutoLogin';\n  token: Scalars['String'];\n};\n\nexport enum OsType {\n  Android = 'ANDROID',\n  Linux = 'LINUX',\n  Tizen = 'TIZEN',\n  Webos = 'WEBOS'\n}\n\nexport type OpenTime = {\n  __typename?: 'OpenTime';\n  /** Time close */\n  closeTime: Scalars['Float'];\n  /** Day */\n  day: DayOfWeek;\n  /** is open time */\n  isOpen: Scalars['Boolean'];\n  /** Time open */\n  openTime: Scalars['Float'];\n};\n\nexport type OpenTimeInput = {\n  /** Time close */\n  closeTime: Scalars['Float'];\n  /** Day */\n  day: DayOfWeek;\n  /** is open time */\n  isOpen: Scalars['Boolean'];\n  /** Time open */\n  openTime: Scalars['Float'];\n};\n\nexport type PaginatedCompany = {\n  __typename?: 'PaginatedCompany';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<Company>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedCompanyUser = {\n  __typename?: 'PaginatedCompanyUser';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<CompanyUser>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedDevice = {\n  __typename?: 'PaginatedDevice';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<Device>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedGroup = {\n  __typename?: 'PaginatedGroup';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<Group>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedMedia = {\n  __typename?: 'PaginatedMedia';\n  currentFolder?: Maybe<Media>;\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<Media>>;\n  s3FolderSize?: Maybe<Scalars['String']>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedPlaylist = {\n  __typename?: 'PaginatedPlaylist';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<Playlist>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type PaginatedUser = {\n  __typename?: 'PaginatedUser';\n  currentPage: Scalars['Int'];\n  hasMore?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  items?: Maybe<Array<User>>;\n  total: Scalars['Int'];\n  totalPage: Scalars['Int'];\n};\n\nexport type Playlist = {\n  __typename?: 'Playlist';\n  /** id */\n  _id: Scalars['ID'];\n  acceptedBy?: Maybe<User>;\n  acceptedById?: Maybe<Scalars['ID']>;\n  canceledBy?: Maybe<User>;\n  canceledById?: Maybe<Scalars['ID']>;\n  company?: Maybe<Company>;\n  companyId: Scalars['ID'];\n  createdAt: Scalars['Float'];\n  createdBy?: Maybe<User>;\n  createdById: Scalars['ID'];\n  deletedAt?: Maybe<Scalars['Float']>;\n  deletedBy?: Maybe<Scalars['ID']>;\n  deletedByUser?: Maybe<User>;\n  editingBy?: Maybe<User>;\n  editingById?: Maybe<Scalars['ID']>;\n  frames: Array<Frame>;\n  name: Scalars['String'];\n  orientation: FrameDirection;\n  rejectedBy?: Maybe<User>;\n  rejectedById?: Maybe<Scalars['ID']>;\n  resolution: Resolutions;\n  screenType: PlaylistScreenType;\n  secondFrames?: Maybe<Array<Frame>>;\n  status: PlaylistStatus;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy?: Maybe<User>;\n  updatedById?: Maybe<Scalars['ID']>;\n};\n\nexport enum PlaylistScreenType {\n  FulScreen = 'FUL_SCREEN',\n  SplitScreen = 'SPLIT_SCREEN'\n}\n\nexport enum PlaylistStatus {\n  Approved = 'APPROVED',\n  Draft = 'DRAFT',\n  Rejected = 'REJECTED',\n  WaitToApprove = 'WAIT_TO_APPROVE'\n}\n\nexport type PublicUpdateDeviceStatusInput = {\n  status: DeviceStatus;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  companies?: Maybe<PaginatedCompany>;\n  company?: Maybe<Company>;\n  companyUsers?: Maybe<PaginatedCompanyUser>;\n  device?: Maybe<Device>;\n  devices?: Maybe<PaginatedDevice>;\n  getAllTotalInSystem?: Maybe<TotalNumberData>;\n  getDeviceInfo?: Maybe<Device>;\n  getDeviceStatus?: Maybe<DeviceStatus>;\n  group?: Maybe<Group>;\n  groups?: Maybe<PaginatedGroup>;\n  listUsersCanAddToCompany?: Maybe<PaginatedUser>;\n  me: User;\n  media?: Maybe<Media>;\n  medias?: Maybe<PaginatedMedia>;\n  playlist?: Maybe<Playlist>;\n  playlists?: Maybe<PaginatedPlaylist>;\n  publicGetDeviceByCode?: Maybe<Device>;\n  publicGetDevicesByCode?: Maybe<PaginatedDevice>;\n  settings?: Maybe<Array<Setting>>;\n  user?: Maybe<User>;\n  /** filter users, \"deleted\" is filter deleted users */\n  users?: Maybe<PaginatedUser>;\n};\n\n\nexport type QueryCompaniesArgs = {\n  input: QueryCompaniesInput;\n};\n\n\nexport type QueryCompanyArgs = {\n  input: QueryCompanyInput;\n};\n\n\nexport type QueryCompanyUsersArgs = {\n  input: QueryCompanyUsersInput;\n};\n\n\nexport type QueryDeviceArgs = {\n  input: QueryDeviceInput;\n};\n\n\nexport type QueryDevicesArgs = {\n  input: QueryDevicesInput;\n};\n\n\nexport type QueryGroupArgs = {\n  input: QueryGroupInput;\n};\n\n\nexport type QueryGroupsArgs = {\n  input: QueryGroupsInput;\n};\n\n\nexport type QueryListUsersCanAddToCompanyArgs = {\n  input: QueryUsersCanImportInput;\n};\n\n\nexport type QueryMediaArgs = {\n  input: QueryMediaInput;\n};\n\n\nexport type QueryMediasArgs = {\n  input: QueryMediasInput;\n};\n\n\nexport type QueryPlaylistArgs = {\n  input: QueryPlaylistInput;\n};\n\n\nexport type QueryPlaylistsArgs = {\n  input: QueryPlaylistsInput;\n};\n\n\nexport type QueryPublicGetDeviceByCodeArgs = {\n  input: QueryDeviceByCodeInput;\n};\n\n\nexport type QueryPublicGetDevicesByCodeArgs = {\n  input: QueryDevicesByCodeInput;\n};\n\n\nexport type QueryUserArgs = {\n  input: QueryUserInput;\n};\n\n\nexport type QueryUsersArgs = {\n  input: QueryUsersInput;\n};\n\nexport type QueryCompaniesInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  capacity?: Maybe<Capacity>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n  userLimit?: Maybe<UserLimit>;\n};\n\nexport type QueryCompanyInput = {\n  _id: Scalars['ID'];\n};\n\nexport type QueryCompanyUsersInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  companyId?: Maybe<Scalars['ID']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n  role?: Maybe<Roles>;\n};\n\nexport type QueryDeviceByCodeInput = {\n  deviceCode: Scalars['String'];\n  macAddress?: Maybe<Scalars['String']>;\n};\n\nexport type QueryDeviceInput = {\n  _id: Scalars['ID'];\n};\n\nexport type QueryDevicesByCodeInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n};\n\nexport type QueryDevicesInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  companyId?: Maybe<Scalars['ID']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  os?: Maybe<OsType>;\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n  screen?: Maybe<ScreenType>;\n  status?: Maybe<DeviceStatus>;\n};\n\nexport type QueryGroupInput = {\n  _id: Scalars['ID'];\n};\n\nexport type QueryGroupsInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n};\n\nexport type QueryMediaInput = {\n  _id: Scalars['ID'];\n};\n\nexport type QueryMediasInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  filterType?: Maybe<MediaFilterType>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  order?: Maybe<MediaOrderBy>;\n  page?: Maybe<Scalars['Float']>;\n  parentId?: Maybe<Scalars['ID']>;\n  query?: Maybe<Scalars['String']>;\n  status?: Maybe<MediaStatus>;\n  type?: Maybe<FileType>;\n};\n\nexport type QueryPlaylistInput = {\n  _id: Scalars['ID'];\n};\n\nexport type QueryPlaylistsInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  diffApprove?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n  resolution?: Maybe<Resolutions>;\n  status?: Maybe<PlaylistStatus>;\n};\n\nexport type QueryUserInput = {\n  _id?: Maybe<Scalars['ID']>;\n};\n\nexport type QueryUsersCanImportInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  companyId: Scalars['ID'];\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n};\n\nexport type QueryUsersInput = {\n  afterId?: Maybe<Scalars['ID']>;\n  /** Bao gồm các user đã bị xóa */\n  deleted?: Maybe<Scalars['Boolean']>;\n  isLoadMore?: Maybe<Scalars['Boolean']>;\n  /** Khi tìm kiếm user để gán quyền vào company, set isSearchAll = true để lấy tất cả user */\n  isSearchAll?: Maybe<Scalars['Boolean']>;\n  limit: Scalars['Float'];\n  page?: Maybe<Scalars['Float']>;\n  query?: Maybe<Scalars['String']>;\n  role?: Maybe<Roles>;\n};\n\nexport enum Roles {\n  Admin = 'ADMIN',\n  Editor = 'EDITOR',\n  SuperAdmin = 'SUPER_ADMIN'\n}\n\nexport type RefreshTokenInput = {\n  /** old access token, accept expired token */\n  accessToken: Scalars['String'];\n  /** Input refresh token */\n  refreshToken: Scalars['String'];\n};\n\nexport type ResetPasswordInput = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport enum Resolutions {\n  FullHd = 'FULL_HD',\n  Hd = 'HD'\n}\n\nexport type ScanWifiDeviceInput = {\n  _id: Scalars['ID'];\n  companyId?: Maybe<Scalars['String']>;\n};\n\nexport enum ScheduleType {\n  Daily = 'DAILY',\n  Monthly = 'MONTHLY',\n  SpecialDay = 'SPECIAL_DAY',\n  Weekly = 'WEEKLY'\n}\n\nexport enum ScreenType {\n  Led = 'LED',\n  Oled = 'OLED',\n  Qled = 'QLED'\n}\n\nexport type SendGroupMessageInput = {\n  direction: GroupMessageDirection;\n  groupId: Scalars['ID'];\n  loop: Scalars['Int'];\n  message: Scalars['String'];\n  speed: GroupMessageSpeed;\n};\n\nexport type SendWifiInput = {\n  listWifi: Array<WifiTypeInput>;\n};\n\nexport type Setting = {\n  __typename?: 'Setting';\n  _id: Scalars['ID'];\n  key: SettingType;\n  value: Array<SettingData>;\n};\n\nexport type SettingData = {\n  __typename?: 'SettingData';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type SettingDeviceInput = {\n  _id: Scalars['ID'];\n  subscriptionDate?: Maybe<SubscriptionDateInput>;\n  wifi?: Maybe<WifiTypeInput>;\n};\n\nexport enum SettingType {\n  Device = 'DEVICE',\n  Upload = 'UPLOAD'\n}\n\nexport enum Sort {\n  Asc = 'Asc',\n  Desc = 'Desc'\n}\n\nexport type SpecialDay = {\n  __typename?: 'SpecialDay';\n  /** id */\n  _id: Scalars['ID'];\n  closedTime: Scalars['Float'];\n  companyId: Scalars['ID'];\n  createdAt?: Maybe<Scalars['Float']>;\n  date: Scalars['Float'];\n  openTime: Scalars['Float'];\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy: User;\n  updatedById: Scalars['ID'];\n};\n\nexport type SpecialDayScheduleData = {\n  __typename?: 'SpecialDayScheduleData';\n  date: Scalars['String'];\n  timeInDay?: Maybe<TimeInDay>;\n};\n\nexport type SpecialDayScheduleInputData = {\n  date: Scalars['String'];\n  timeInDay?: Maybe<TimeInDayInput>;\n};\n\nexport type StatusConnectWifiInput = {\n  password?: Maybe<Scalars['String']>;\n  ssid: Scalars['String'];\n  status: Scalars['Boolean'];\n};\n\nexport enum SubscriberType {\n  Free = 'FREE',\n  NineMonth = 'NINE_MONTH',\n  SixMonth = 'SIX_MONTH',\n  ThirtySixMonth = 'THIRTY_SIX_MONTH',\n  ThreeMonth = 'THREE_MONTH',\n  TwelveMonth = 'TWELVE_MONTH',\n  TwentyFourMonth = 'TWENTY_FOUR_MONTH'\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  deviceSubs?: Maybe<DevicePubSub>;\n  mediaProcess: Media;\n};\n\nexport type SubscriptionDate = {\n  __typename?: 'SubscriptionDate';\n  fromDate: Scalars['String'];\n  toDate: Scalars['String'];\n};\n\nexport type SubscriptionDateInput = {\n  fromDate: Scalars['String'];\n  toDate: Scalars['String'];\n};\n\nexport type TimeInDay = {\n  __typename?: 'TimeInDay';\n  /** Time end */\n  endOfDay: Scalars['String'];\n  /** Time start */\n  startOfDay: Scalars['String'];\n};\n\nexport type TimeInDayInput = {\n  /** Time end */\n  endOfDay: Scalars['String'];\n  /** Time start */\n  startOfDay: Scalars['String'];\n};\n\nexport type TotalNumberData = {\n  __typename?: 'TotalNumberData';\n  companies?: Maybe<Scalars['Float']>;\n  devices: Scalars['Float'];\n  playlists?: Maybe<Scalars['Float']>;\n  playlistsWaitingApprove?: Maybe<Scalars['Float']>;\n  users: Scalars['Float'];\n};\n\nexport enum User_Status {\n  Active = 'ACTIVE',\n  Inactive = 'INACTIVE'\n}\n\nexport type UpdateCompanyInput = {\n  _id: Scalars['ID'];\n  address?: Maybe<Scalars['String']>;\n  address_latitude?: Maybe<Scalars['Float']>;\n  address_longitude?: Maybe<Scalars['Float']>;\n  capacity?: Maybe<Capacity>;\n  currentStorageSize?: Maybe<Scalars['Float']>;\n  description?: Maybe<Scalars['String']>;\n  domain: Scalars['String'];\n  email: Scalars['String'];\n  limitUpload: Scalars['Float'];\n  name: Scalars['String'];\n  openTimes?: Maybe<Array<OpenTimeInput>>;\n  phone: Scalars['String'];\n  userLimit?: Maybe<UserLimit>;\n};\n\nexport type UpdateDeviceCurrentPlaylistInput = {\n  localTime: Scalars['String'];\n  playlistId: Scalars['ID'];\n};\n\nexport type UpdateDeviceInput = {\n  _id: Scalars['ID'];\n  companyId?: Maybe<Scalars['ID']>;\n  deviceCode?: Maybe<Scalars['String']>;\n  deviceModel?: Maybe<Scalars['String']>;\n  groupId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  os?: Maybe<OsType>;\n  schedules?: Maybe<Array<DevicePlaylistScheduleInput>>;\n  screen?: Maybe<ScreenType>;\n  yearOfManufacture?: Maybe<Scalars['Float']>;\n};\n\nexport type UpdateDeviceSchedulesInput = {\n  _id: Scalars['ID'];\n  schedules?: Maybe<Array<DevicePlaylistScheduleInput>>;\n};\n\nexport type UpdateDeviceStatusInput = {\n  _id: Scalars['ID'];\n  status: DeviceStatus;\n};\n\nexport type UpdateGroupInput = {\n  _id: Scalars['ID'];\n  deviceIds?: Maybe<Array<Scalars['ID']>>;\n  name: Scalars['String'];\n  note?: Maybe<Scalars['String']>;\n  timezone: Scalars['String'];\n};\n\nexport type UpdateMediaInput = {\n  _id: Scalars['ID'];\n  filename: Scalars['String'];\n};\n\nexport type UpdatePlaylistInput = {\n  _id: Scalars['ID'];\n  companyId?: Maybe<Scalars['ID']>;\n  frames?: Maybe<Array<FrameInputType>>;\n  name?: Maybe<Scalars['String']>;\n  orientation?: Maybe<FrameDirection>;\n  resolution?: Maybe<Resolutions>;\n  screenType?: Maybe<PlaylistScreenType>;\n  secondFrames?: Maybe<Array<FrameInputType>>;\n  status?: Maybe<PlaylistStatus>;\n};\n\nexport type UpdatePlaylistStatusInput = {\n  _id: Scalars['ID'];\n  status: PlaylistStatus;\n};\n\nexport type UpdateProfileInput = {\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateRotateInput = {\n  _id: Scalars['ID'];\n  direction: DirectionRotateType;\n};\n\nexport type UpdateTimeZoneGroupInput = {\n  _id: Scalars['ID'];\n  timezone: Scalars['String'];\n};\n\nexport type UpdateUserInput = {\n  _id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n};\n\n\nexport type UploadSettingDataInput = {\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  /** id */\n  _id: Scalars['ID'];\n  companies?: Maybe<Array<Company>>;\n  createdAt?: Maybe<Scalars['Float']>;\n  createdBy?: Maybe<User>;\n  createdById?: Maybe<Scalars['ID']>;\n  deletedAt?: Maybe<Scalars['Float']>;\n  deletedBy?: Maybe<Scalars['ID']>;\n  deletedByUser?: Maybe<User>;\n  /** email */\n  email?: Maybe<Scalars['String']>;\n  /** full name */\n  name: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  role: Roles;\n  status: User_Status;\n  updatedAt?: Maybe<Scalars['Float']>;\n  updatedBy: User;\n  updatedById: Scalars['ID'];\n  username: Scalars['String'];\n};\n\nexport enum UserLimit {\n  Fifty = 'FIFTY',\n  Hundred = 'HUNDRED',\n  Thousand = 'THOUSAND',\n  Twenty = 'TWENTY'\n}\n\nexport type VerifyTokenAutoLoginInput = {\n  token: Scalars['String'];\n};\n\nexport enum VideoPreset {\n  Video360P = 'Video360P',\n  Video480P = 'Video480P',\n  Video720P = 'Video720P',\n  Video1080P = 'Video1080P'\n}\n\nexport type VideoProfile = {\n  __typename?: 'VideoProfile';\n  path?: Maybe<Scalars['String']>;\n  preset?: Maybe<VideoPreset>;\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type VideoProfileInput = {\n  path?: Maybe<Scalars['String']>;\n  preset?: Maybe<VideoPreset>;\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type WeeklyScheduleData = {\n  __typename?: 'WeeklyScheduleData';\n  dateRange?: Maybe<DateRange>;\n  daysOfWeek: Array<Scalars['Int']>;\n  timeInDay?: Maybe<TimeInDay>;\n};\n\nexport type WeeklyScheduleInputData = {\n  dateRange?: Maybe<DateRangeInput>;\n  daysOfWeek: Array<Scalars['Int']>;\n  timeInDay?: Maybe<TimeInDayInput>;\n};\n\nexport type WifiType = {\n  __typename?: 'WifiType';\n  encryptMode: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  signalLevel?: Maybe<Scalars['Int']>;\n  ssid: Scalars['String'];\n  status?: Maybe<Scalars['Boolean']>;\n};\n\nexport type WifiTypeInput = {\n  encryptMode: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n  signalLevel?: Maybe<Scalars['Int']>;\n  ssid: Scalars['String'];\n  status?: Maybe<Scalars['Boolean']>;\n};\n\nexport type GetCompanyQueryVariables = Exact<{\n  input: QueryCompanyInput;\n}>;\n\n\nexport type GetCompanyQuery = (\n  { __typename?: 'Query' }\n  & { company?: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, '_id'>\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  input: LoginInput;\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'JWT' }\n    & Pick<Jwt, 'token'>\n  ) }\n);\n\n\nexport const GetCompanyDocument = gql`\n    query getCompany($input: QueryCompanyInput!) {\n  company(input: $input) {\n    _id\n  }\n}\n    `;\nexport const LoginDocument = gql`\n    mutation login($input: LoginInput!) {\n  login(input: $input) {\n    token\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getCompany(variables: GetCompanyQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GetCompanyQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetCompanyQuery>(GetCompanyDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCompany');\n    },\n    login(variables: LoginMutationVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<LoginMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LoginMutation>(LoginDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'login');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\r\nimport env from '../env';\r\nimport { getSdk } from './generated/graphql';\r\n\r\nexport const getClient = (auth = true, signal?: AbortSignal) => {\r\n  const headers: { [k: string]: any } = {};\r\n\r\n  const lang = 'vi';\r\n\r\n  // if (auth) {\r\n  //   headers.authorization = auth ? getToken() : undefined;\r\n  // }\r\n  headers['x-lang'] = lang;\r\n\r\n  const graphQLClient = new GraphQLClient(env.apiEndPoint, {\r\n    headers,\r\n    signal,\r\n  });\r\n\r\n  return graphQLClient;\r\n};\r\n\r\nexport const getSDK = (auth = true, signal?: AbortSignal) => {\r\n  const client = getClient(auth, signal);\r\n  return getSdk(client);\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  getClient,\r\n  getSDK,\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport { Grid, TextField, Button, makeStyles, createStyles, Theme } from '@material-ui/core';\r\nimport useLogin from './hooks/useLogin';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      maxWidth: '450px',\r\n      display: 'block',\r\n      margin: '0 auto',\r\n      height: '520px',\r\n      border: '1px solid gray',\r\n      borderRadius: '10px',\r\n    },\r\n    textField: {\r\n      '& > *': {\r\n        width: '100%',\r\n      },\r\n    },\r\n    submitButton: {\r\n      marginTop: '24px',\r\n    },\r\n    title: { textAlign: 'center' },\r\n    successMessage: { color: 'green' },\r\n    errorMessage: { color: 'red' },\r\n  }),\r\n);\r\nexport default function LoginPage() {\r\n  const history = useHistory();\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: 'giangpt',\r\n      password: '1234567',\r\n    },\r\n    onSubmit: (values) => {\r\n      hadleSubmit(values);\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const { data, onLogin } = useLogin();\r\n  function hadleSubmit(values: any) {\r\n    onLogin({ username: values.email, password: values.password });\r\n    // console.log('errrrrrrrr', error);\r\n  }\r\n  useEffect(() => {\r\n    if (data !== undefined) {\r\n      if (data.login.token) {\r\n        history.replace('/home');\r\n      } else {\r\n        alert('Email or Password was wrong !!!');\r\n      }\r\n    }\r\n    //\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ paddingTop: 80 }}>\r\n        <div className={classes.root}>\r\n          <form onSubmit={formik.handleSubmit}>\r\n            <Grid container justify=\"space-around\" direction=\"row\">\r\n              <Grid\r\n                item\r\n                lg={10}\r\n                md={10}\r\n                sm={10}\r\n                xs={10}\r\n                className={classes.textField}\r\n                style={{ textAlign: 'center', paddingTop: 40, paddingBottom: 20 }}\r\n              >\r\n                <h1>Login Form</h1>\r\n              </Grid>\r\n              <Grid item lg={10} md={10} sm={10} xs={10} className={classes.textField} style={{ paddingBottom: 20 }}>\r\n                <TextField\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  label=\"Email \"\r\n                  value={formik.values.email}\r\n                  type=\"text\"\r\n                  helperText={'Enter your full name.'}\r\n                  onChange={formik.handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={10} md={10} sm={10} xs={10} className={classes.textField} style={{ paddingBottom: 20 }}>\r\n                <TextField\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  label=\"Password\"\r\n                  value={formik.values.password}\r\n                  type=\"password\"\r\n                  helperText={'Please valid password.'}\r\n                  onChange={formik.handleChange}\r\n                />\r\n              </Grid>\r\n              <Grid item lg={10} md={10} sm={10} xs={10} className={classes.textField} style={{ paddingTop: 40 }}>\r\n                <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n                  Submits\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { getSDK } from '@/graphql/client';\nimport { LoginInput } from '@/graphql/generated/graphql';\nimport { useState } from 'react';\n\nexport default function useLogin() {\n  const [{ fetching, error, data }, setState] = useState<{\n    fetching: boolean;\n    error?: any;\n    data?: any;\n  }>({\n    fetching: false,\n    data: undefined,\n  });\n  // const [data, setData] = useState\n  const onLogin = async (input: LoginInput) => {\n    setState((state) => ({\n      ...state,\n      fetching: true,\n    }));\n    await getSDK()\n      .login({ input })\n      .then((data) => {\n        setState({ fetching: false, data });\n      })\n      .catch((error: any) => {\n        setState({\n          fetching: false,\n          error,\n        });\n      });\n  };\n\n  return {\n    fetching,\n    error,\n    data,\n    onLogin,\n  };\n}\n","import React from 'react';\n\nexport default function HomePage() {\n  return <div>Home Pageasssssssssssssssssssssssssssssssssssssssssss</div>;\n}\n","import React, { useState, useRef } from 'react';\r\n\r\nfunction TodoForm(props: any) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  const [inputImage, setInputImage] = useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const handleChange = (e: any) => {\r\n    setInput(e.target.value);\r\n  };\r\n  const handleChangeImage = (e: any) => {\r\n    setInputImage(e.target.value);\r\n  };\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n      image: inputImage,\r\n    });\r\n    setInput('');\r\n    setInputImage('');\r\n  };\r\n  // useEffect(() => {\r\n  //   handleFilter();\r\n  // }, []);\r\n  // const handleFilter = () => {\r\n  //   switch (itemSelect) {\r\n  //     case 'completed':\r\n  //       setFilterTodo(() => {\r\n  //         const arr = filterTodo.filter((td: Task) => td.status);\r\n  //         console.log(filterTodo);\r\n  //         return arr;\r\n  //       });\r\n  //       break;\r\n  //     case 'notCompleted':\r\n  //       setFilterTodo(() => {\r\n  //         const arr = filterTodo.filter((td: Task) => !td.status);\r\n  //         console.log(filterTodo);\r\n  //         return arr;\r\n  //       });\r\n  //       break;\r\n  //     default:\r\n  //       setFilterTodo(() => {\r\n  //         console.log(filterTodo);\r\n  //         return filterTodo;\r\n  //       });\r\n  //       break;\r\n  //   }\r\n  // };\r\n\r\n  // const onChangeSelect = (e: any) => {\r\n  //   setItemSelect(e.target.value);\r\n  // };\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"todo-form-update\" style={{ paddingBottom: '20px' }}>\r\n      {props.edit ? (\r\n        <>\r\n          <div className=\"Update-form\" style={{ display: 'inline-block', height: '100% ' }}>\r\n            <input\r\n              placeholder=\"Update your item\"\r\n              value={input}\r\n              onChange={handleChange}\r\n              name=\"text\"\r\n              ref={inputRef}\r\n              className=\"todo-input edit\"\r\n              style={{ width: 346, height: 36, marginRight: 8 }}\r\n            />\r\n            <input\r\n              placeholder=\"Update your item\"\r\n              value={inputImage}\r\n              onChange={handleChangeImage}\r\n              name=\"text\"\r\n              ref={inputRef}\r\n              className=\"todo-input edit\"\r\n              style={{ width: 346, height: 36, marginRight: 8 }}\r\n            />\r\n            <div\r\n              className=\"todo-button\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                backgroundColor: 'rgb(24 111 124)',\r\n                textAlign: 'center',\r\n                color: '#fff',\r\n                marginTop: 30,\r\n                height: 30,\r\n                borderRadius: 8,\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              Update\r\n            </div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <form onSubmit={handleSubmit} style={{ display: 'grid', paddingRight: 30 }}>\r\n            <input\r\n              placeholder=\"Add a Food\"\r\n              value={input}\r\n              onChange={handleChange}\r\n              name=\"text\"\r\n              className=\"todo-input\"\r\n              ref={inputRef}\r\n              style={{ height: 35, borderRadius: 7, border: 'none', minWidth: 345, marginBottom: 20 }}\r\n            />\r\n            <input\r\n              placeholder=\"Image link ...\"\r\n              value={inputImage}\r\n              onChange={handleChangeImage}\r\n              name=\"text\"\r\n              className=\"todo-input\"\r\n              ref={inputRef}\r\n              style={{ height: 35, borderRadius: 7, border: 'none', minWidth: 345, marginBottom: 20 }}\r\n            />\r\n            <div\r\n              className=\"todo-button\"\r\n              onClick={handleSubmit}\r\n              style={{\r\n                backgroundColor: 'rgb(46 85 118)',\r\n                textAlign: 'center',\r\n                height: 30,\r\n                borderRadius: 8,\r\n                color: '#fff',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                display: 'flex',\r\n              }}\r\n            >\r\n              {/* <AiOutlinePlus className=\"icon\" /> */}\r\n              Add\r\n            </div>\r\n          </form>\r\n          {/* <div style={{ height: 35 }}>\r\n            <select\r\n              value={itemSelect}\r\n              style={{ height: '100%', borderRadius: 7, border: 'none' }}\r\n              onChange={onChangeSelect}\r\n            >\r\n              <option value={itemSelect} onClick={() => console.log(itemSelect)}>\r\n                All\r\n              </option>\r\n              <option value=\"completed\" onClick={() => console.log(itemSelect)}>\r\n                Completed\r\n              </option>\r\n              <option value=\"notCompleted\">Not Completed</option>\r\n            </select>\r\n          </div> */}\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { Button, Card, CardActions, CardContent, CardMedia, Typography } from '@material-ui/core';\r\n\r\nconst Todo = (props: any) => {\r\n  const { todos, completeTodo, removeTodo, updateTodo } = props;\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: '',\r\n  });\r\n  const submitUpdate = (value: string) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: '',\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo: any, index: number) => (\r\n    <div key={index} className=\"todo-row\" style={{ paddingBottom: 30, padding: 10 }}>\r\n      {/* <h5 className={todo.status ? 'complete' : ''} key={todo.id}>\r\n        {todo.text}\r\n      </h5>\r\n      <div className=\"icons\">\r\n        <div\r\n          onClick={() => completeTodo(todo.id)}\r\n          className=\"item-icon\"\r\n          style={{ backgroundColor: 'rgb(24 111 124)', color: '#fff' }}\r\n        >\r\n          <span>Active</span>\r\n          <IoMdDoneAll className=\"icon\" />\r\n        </div>\r\n        <div\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className=\"item-icon\"\r\n          style={{ backgroundColor: 'rgb(24 111 124)', color: '#fff' }}\r\n        >\r\n          <span>Edit</span>\r\n          <FaEdit className=\"icon\" />\r\n        </div>\r\n        <div\r\n          onClick={() => removeTodo(todo.id)}\r\n          className=\"item-icon\"\r\n          style={{ backgroundColor: 'rgb(24 111 124)', color: '#fff' }}\r\n        >\r\n          <span>Delete</span>\r\n          <AiOutlineDelete className=\"icon\" />\r\n        </div>\r\n      </div> */}\r\n      <Card style={{ maxWidth: 345 }} key={todo.id}>\r\n        <CardMedia component=\"img\" height=\"140\" image={todo.image} alt=\"green iguana\" />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"div\" className={todo.status ? 'complete' : ''}>\r\n            {todo.text}\r\n          </Typography>\r\n          <Typography variant=\"body2\" style={{ color: 'gray' }}>\r\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents\r\n            except Antarctica\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions>\r\n          <Button size=\"small\" onClick={() => completeTodo(todo.id)}>\r\n            Active\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => setEdit({ id: todo.id, value: todo.text })}>\r\n            Edit\r\n          </Button>\r\n          <Button size=\"small\" onClick={() => removeTodo(todo.id)}>\r\n            Delete\r\n          </Button>\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\nimport Image from '../../assets/images/item8.png';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nexport interface Task {\r\n  id: number;\r\n  text: string;\r\n  status: boolean;\r\n  image: any;\r\n}\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState<Task[]>([\r\n    {\r\n      id: 3,\r\n      text: 'Thịt cho nấu rượu mận ',\r\n      status: false,\r\n      image: Image,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Dồi cho nướng than hoa',\r\n      status: false,\r\n      image: Image,\r\n    },\r\n    {\r\n      id: 6,\r\n      text: 'Ba chỉ chó nướng lá na',\r\n      status: true,\r\n      image: Image,\r\n    },\r\n    {\r\n      id: 4,\r\n      text: 'Thịt cho nấu rượu mận 1',\r\n      status: false,\r\n      image: Image,\r\n    },\r\n    {\r\n      id: 5,\r\n      text: 'Dồi cho nướng than hoa 2',\r\n      status: false,\r\n      image: Image,\r\n    },\r\n    {\r\n      id: 1,\r\n      text: 'Ba chỉ chó nướng lá na 3',\r\n      status: true,\r\n      image: Image,\r\n    },\r\n  ]);\r\n\r\n  const { addToast } = useToasts();\r\n  const addTodo = (todo: Task) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      addToast('Failed', {\r\n        appearance: 'error',\r\n        autoDismiss: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n    addToast('Added Success', {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  const updateTodo = (todoId: number, newValue: Task) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    setTodos((prev) => prev.map((item) => (item.id === todoId ? newValue : item)));\r\n    addToast('Update Success', {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  const removeTodo = (id: number) => {\r\n    const removedArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n    addToast('Delete Success', {\r\n      appearance: 'success',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  const completeTodo = (id: number) => {\r\n    const updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.status = !todo.status;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n    addToast('Changed Success', {\r\n      appearance: 'warning',\r\n      autoDismiss: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ backgroundColor: '#1f1b3a', height: '100%' }}>\r\n        <div style={{ paddingTop: 50, paddingBottom: 50, backgroundColor: '#1f1b3a' }}>\r\n          <div className=\"container section-todos\">\r\n            <h1 style={{ color: '#fff', paddingBottom: 40, fontSize: '65px', textAlign: 'center' }}>To-do List</h1>\r\n            <div className=\"section-form\" style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n              <TodoForm onSubmit={addTodo} />\r\n            </div>\r\n            <div\r\n              className=\"row section-contents\"\r\n              style={{\r\n                width: '100%',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                margin: 0,\r\n              }}\r\n            >\r\n              <div className=\"col-12 col-md-6 col-lg-4 item-todo\" style={{ display: 'contents' }}>\r\n                <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import HomePage from '@modules/Home';\nimport TodoList from '@modules/TodoList/TodoList';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Link, Route } from 'react-router-dom';\n\nexport default function Navigation() {\n  return (\n    <>\n      <Router>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light my-navbar\">\n          <div className=\"container-fluid my-navbar-content\">\n            <div className=\"navbar-brand content-left\">\n              <img\n                src=\"https://comartek.com/wp-content/uploads/2021/07/concept_logo-web.png\"\n                alt=\"Comartek\"\n                style={{ width: '50%' }}\n              />\n            </div>\n            <div className=\"collapse navbar-collapse content-right\" id=\"navbarNavAltMarkup\">\n              <div className=\"navbar-nav \">\n                <div className=\"nav-link active\" aria-current=\"page\">\n                  <Link\n                    className=\"item-nav\"\n                    to=\"/home\"\n                    style={{ textDecoration: 'none', paddingRight: 20, fontSize: 24 }}\n                  >\n                    HomePage\n                  </Link>\n                  <Link\n                    className=\"item-nav\"\n                    to=\"/todo-list\"\n                    style={{ textDecoration: 'none', paddingRight: 20, fontSize: 24 }}\n                  >\n                    Todo List\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n        <Switch>\n          <Route path=\"/home\">\n            <HomePage />\n          </Route>\n          <Route path=\"/todo-list\">\n            <TodoList />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n","import LoginPage from '@modules/Login';\n// import useLogin from '@modules/Login/hooks/useLogin';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Navigation from '../components/Navigation';\n\nexport default function AppRouter() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route\n            path=\"/home\"\n            render={() => {\n              return true ? <Navigation /> : <Redirect to=\"/LoginForm\" />;\n            }}\n          >\n            <Navigation />\n          </Route>\n          <Route path=\"/LoginForm\" exact={true}>\n            <LoginPage />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n","// src/i18n.js\r\nimport i18n from 'i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next)\r\n  .init({\r\n    fallbackLng: 'en',\r\n    debug: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n    react: {\r\n      useSuspense: false,\r\n    },\r\n    ns: ['notification'],\r\n    defaultNS: ['notification'],\r\n    detection: {\r\n      order: ['cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n      lookupCookie: 'win-solution-supper-admin-language',\r\n      lookupLocalStorage: 'win-solution-supper-admin-language',\r\n      lookupSessionStorage: 'win-solution-supper-admin-language',\r\n      caches: ['localStorage', 'cookie'],\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","// import LoginPage from '@modules/Login';\n// import TodoList from '@modules/TodoList/TodoList';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ToastProvider } from 'react-toast-notifications';\n// import Navigation from './components/Navigation';\nimport AppRouter from './components/RootApp';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastProvider>\n      {/* <Navigation /> */}\n      <AppRouter />\n      {/* <TodoList /> */}\n    </ToastProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","module.exports = __webpack_public_path__ + \"static/media/item8.5a18a18b.png\";","export interface ENV {\r\n  apiEndPoint: string;\r\n  root: string;\r\n  pageTitle: string;\r\n  tokenKey: string;\r\n  appName: string;\r\n  apiSubscriptionEndPoint: string;\r\n  languageKey: string;\r\n  formatDate: string;\r\n}\r\n\r\nconst cwd = process.cwd();\r\nconst root = __dirname.replace(`${cwd}`, '.');\r\nconst env: ENV = {\r\n  apiEndPoint: process.env.REACT_APP_API_END_POINT || '',\r\n  apiSubscriptionEndPoint: process.env.REACT_APP_API_SUBSCRIPTION_END_POINT || '',\r\n  root,\r\n  pageTitle: process.env.REACT_APP_PAGE_TITLE || '',\r\n  tokenKey: process.env.REACT_APP_TOKEN_KEY || '',\r\n  appName: process.env.REACT_APP_NAME || '',\r\n  languageKey: process.env.REACT_APP_LANGUAGE_KEY || '',\r\n  formatDate: process.env.REACT_APP_FORMAT_DATE || '',\r\n};\r\n\r\nexport default env;\r\n"],"sourceRoot":""}